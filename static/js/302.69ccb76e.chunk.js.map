{"version":3,"file":"static/js/302.69ccb76e.chunk.js","mappings":"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","sources":["Api.js","webpack://goit-react-hw-05-movies/./src/components/Button/Button.module.css?ce6f","components/Button/Button.jsx","webpack://goit-react-hw-05-movies/./src/components/MovieL/MovieL.module.css?6ea4","components/MovieL/MovieL.jsx","../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-05-movies/./src/components/Search/Search.module.css?06df","components/Search/Search.jsx","webpack://goit-react-hw-05-movies/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3/`;\nconst KEY = '9167ee7ecb36a9f774a46dedb9c5a8cc';\n\nexport class ApiMovies {\n  #API_KEY = KEY;\n\n  constructor() {\n    this.BASE_URL = 'https://image.tmdb.org/t/p/w500';\n    this.defaultImg =\n      'https://png.pngtree.com/png-vector/20200812/ourmid/pngtree-film-noir-set-clapperboard-png-image_2324477.jpg';\n  }\n\n  async getPopularMovies(page) {\n    const params = new URLSearchParams({\n      api_key: this.#API_KEY,\n      page: page,\n    });\n\n    const { data } = await axios.get('trending/movie/day', { params });\n    return data;\n  }\n\n  async getMovieByQuery(query, page) {\n    const params = new URLSearchParams({\n      api_key: this.#API_KEY,\n      query: query,\n      page: page,\n      language: 'en-US',\n      include_adult: false,\n    });\n\n    const { data } = await axios.get('/search/movie', { params });\n    return data;\n  }\n\n  async getMovieById(id) {\n    const params = new URLSearchParams({\n      api_key: this.#API_KEY,\n      language: 'en-US',\n      include_adult: false,\n    });\n\n    try {\n      const { data } = await axios.get(`movie/${id}?${params}`);\n      return data;\n    } catch (error) {\n      if (error.response && error.response.status === 404) {\n        throw new Error('Oops, there is no movie with that name');\n      }\n      throw error;\n    }\n  }\n\n  async getMovieCast(id) {\n    const params = new URLSearchParams({\n      api_key: this.#API_KEY,\n      language: 'en-US',\n    });\n    const { data } = await axios.get(`movie/${id}/credits?${params}`);\n    return data.cast;\n  }\n\n  async getMovieReview(id) {\n    const params = new URLSearchParams({\n      api_key: this.#API_KEY,\n      language: 'en-US',\n    });\n    const { data } = await axios.get(`movie/${id}/reviews?${params}`);\n    return data.results;\n  }\n}\n\nexport const ApiMoviesService = new ApiMovies();\n","// extracted by mini-css-extract-plugin\nexport default {\"btnContainer\":\"Button_btnContainer__MuD9z\",\"button\":\"Button_button__wiIYs\"};","import PropTypes from 'prop-types';\nimport style from './Button.module.css';\n\nexport const Btn = ({ onBtnClick }) => {\n  return (\n    <div className={style.btnContainer}>\n      <button className={style.button} type=\"button\" onClick={onBtnClick}>\n        Load more\n      </button>\n    </div>\n  );\n};\n\nBtn.propTypes = {\n  onButtonClick: PropTypes.func,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"ul\":\"MovieL_ul__6PWdY\",\"li\":\"MovieL_li__Uv8sA\",\"p\":\"MovieL_p__qcCND\",\"img\":\"MovieL_img__I+V8m\"};","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { ApiMoviesService } from '../../Api';\nimport { nanoid } from 'nanoid';\nimport style from './MovieL.module.css';\n\nexport const MovieL = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <ul className={style.ul}>\n      {movies.map(movie => {\n        const movieId = nanoid();\n        return (\n          <li className={style.li} key={movieId}>\n            <p className={style.p}>\n              {movie.title} <span>{movie.vote_average.toFixed(2)}</span>\n            </p>\n            <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n              <img\n                className={style.img}\n                src={\n                  movie.poster_path\n                    ? `${ApiMoviesService.BASE_URL}${movie.poster_path}`\n                    : ApiMoviesService.defaultImg\n                }\n                alt={movie.title}\n                width=\"200\"\n              />\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nMovieL.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n    })\n  ),\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Search_form__KGT+E\",\"label\":\"Search_label__R648n\",\"input\":\"Search_input__PXR0c\",\"btn\":\"Search_btn__M-SxT\"};","import PropTypes from 'prop-types';\nimport style from './Search.module.css';\n\nexport const Search = ({ onSubmit }) => {\n  const handleSubmit = e => {\n    e.preventDefault();\n    const { query } = e.target.elements;\n    onSubmit(query.value);\n    e.target.reset();\n  };\n\n  return (\n    <div>\n      <form className={style.form} onSubmit={handleSubmit}>\n        <label className={style.label}>\n          <input className={style.input} type=\"text\" name=\"query\" />\n        </label>\n        <button type=\"submit\" className={style.btn}>\n          Search\n        </button>\n      </form>\n    </div>\n  );\n};\n\nSearch.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"Movies_main__zVRJ-\"};","import { ApiMoviesService } from 'Api';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Search } from 'components/Search/Search';\nimport { MovieL } from 'components/MovieL/MovieL';\nimport { Btn } from 'components/Button/Button';\nimport style from './Movies.module.css';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [page, setPage] = useState(1);\n  const [total_results, setTotalResults] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  const formSubmit = inputQuery => {\n    setPage(1);\n    setMovies([]);\n    setSearchParams(inputQuery !== '' ? { query: inputQuery } : {});\n  };\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n\n    ApiMoviesService.getMovieByQuery(query, page).then(r => {\n      setMovies(prevMovies => {\n        const updatedMovies = [...prevMovies];\n        r.results.forEach(movie => {\n          if (\n            !updatedMovies.some(existingMovie => existingMovie.id === movie.id)\n          ) {\n            updatedMovies.push(movie);\n          }\n        });\n        return updatedMovies;\n      });\n      setTotalResults(r.total_results);\n    });\n  }, [query, page]);\n\n  const loadMore = () => {\n    setPage(prevPage => prevPage + 1);\n  };\n\n  return (\n    <main className={style.main}>\n      <Search onSubmit={formSubmit} />\n      {movies.length > 0 && query && <MovieL movies={movies} />}\n      {total_results / 20 >= page && (\n        <Btn text=\"Load more\" status=\"search\" onClick={loadMore} />\n      )}\n    </main>\n  );\n};\n\nexport default Movies;\n"],"names":["axios","ApiMovies","this","BASE_URL","defaultImg","page","params","URLSearchParams","api_key","data","query","language","include_adult","id","response","status","Error","cast","results","ApiMoviesService","Btn","onBtnClick","className","style","type","onClick","MovieL","movies","location","useLocation","map","movie","movieId","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","title","vote_average","toFixed","to","state","from","src","poster_path","alt","width","Search","onSubmit","e","preventDefault","target","elements","value","reset","name","useState","setMovies","setPage","total_results","setTotalResults","useSearchParams","searchParams","setSearchParams","get","useEffect","then","r","prevMovies","updatedMovies","forEach","some","existingMovie","push","inputQuery","length","text","prevPage"],"sourceRoot":""}